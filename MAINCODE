import pandas as pd
from geopy.distance import geodesic
from itertools import combinations
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import heapq
from datetime import timedelta


# Load the data
file_path = '/content/all_waybill_info_meituan.csv'
data = pd.read_csv(file_path)


# Convert the platform_order_time and estimate_arrived_time columns to datetime
data['platform_order_time'] = pd.to_datetime(data['platform_order_time'], unit='s')
data['estimate_arrived_time'] = pd.to_datetime(data['estimate_arrived_time'], unit='s')
data['arrive_time'] = pd.to_datetime(data['arrive_time'], unit='s')  # Assuming arrive_time exists

# Ensure latitude and longitude are in float format for both sender and recipient
data['sender_lat'] = pd.to_numeric(data['sender_lat'], errors='coerce') / 1e6
data['sender_lng'] = pd.to_numeric(data['sender_lng'], errors='coerce') / 1e6
data['recipient_lat'] = pd.to_numeric(data['recipient_lat'], errors='coerce') / 1e6
data['recipient_lng'] = pd.to_numeric(data['recipient_lng'], errors='coerce') / 1e6

# Remove prebooked orders and orders not grabbed by couriers
data = data[(data['is_prebook'] == 0) & (data['is_courier_grabbed'] == 1)]

# Filter out rows with negative delivery times
data = data[data['arrive_time'] >= data['platform_order_time']]

# Function to calculate the geodesic distance between two points
def calculate_distance(coord1, coord2):
    return geodesic(coord1, coord2).meters

# Nearest neighbor heuristic function to find the optimal order of delivery including pickup locations
def nearest_neighbor_tsp(orders, start_point):
    unvisited = orders.copy()
    route = [start_point]
    current_point = start_point

    while unvisited:
        # Find the nearest recipient location or pickup location
        nearest = min(unvisited, key=lambda x: calculate_distance(current_point, 
                        (x['recipient_lat'], x['recipient_lng'])))
        # Check if pickup location is closer than recipient location
        if calculate_distance(current_point, (nearest['sender_lat'], nearest['sender_lng'])) < \
           calculate_distance(current_point, (nearest['recipient_lat'], nearest['recipient_lng'])):
            route.append((nearest['sender_lat'], nearest['sender_lng']))  # Move to pickup location first
            current_point = (nearest['sender_lat'], nearest['sender_lng'])
        else:
            route.append((nearest['recipient_lat'], nearest['recipient_lng']))  # Move to recipient location
            current_point = (nearest['recipient_lat'], nearest['recipient_lng'])
        unvisited.remove(nearest)

    return route

# Group orders based on a 2-minute interval of platform_order_time
data['interval'] = data['platform_order_time'].dt.floor('2min')
grouped_data = data.groupby('interval')

# Parameters
max_distance = 1000  # max distance between orders in meters for grouping
max_group_size = 5  # maximum allowed number of orders per group
time_window = pd.Timedelta(minutes=45)  # max allowed delivery time window

# Courier availability using heapq (priority queue) to manage the available time of couriers
courier_queue = [(0, i) for i in range(1, 31)]  # Initialize with 30 couriers available at time 0

# Result storage
grouped_orders = []
ungrouped_orders = []
used_order_ids = set()  # Track used order IDs
group_id_counter = 1  # Initialize a counter for group IDs

# Process each 2-minute interval group separately
for interval, group in grouped_data:
    interval_timestamp = interval.timestamp()  # Convert interval to a timestamp

    if not courier_queue:
        continue  # Skip if no couriers are available

    # Pop the earliest available courier
    available_time, courier_id = heapq.heappop(courier_queue)

    # Check if the courier is available for the current interval
    if available_time > interval_timestamp:
        heapq.heappush(courier_queue, (available_time, courier_id))
        continue  # Skip this interval if no couriers are available

    # Check combinations within the 2-minute interval group
    for combo_size in range(2, len(group) + 1):
        for combo in combinations(group.index, combo_size):
            sub_group = group.loc[list(combo)]

            # Ensure that the orders have not already been used
            if not sub_group['order_id'].isin(used_order_ids).any():
                # Check if the subgroup has more than one order and does not exceed max group size
                if 2 <= len(sub_group) <= max_group_size:
                    # Check if all orders in the subgroup can be delivered within the promised time
                    start_point = (sub_group.iloc[0]['sender_lat'], sub_group.iloc[0]['sender_lng'])  # Start from pickup
                    route = nearest_neighbor_tsp(sub_group.to_dict('records'), start_point)

                    # Calculate total travel time and check if it meets the promise times
                    total_travel_time = 0
                    for i in range(1, len(route)):
                        dist = calculate_distance(route[i-1], route[i])
                        total_travel_time += dist / 300  # assuming average speed of 300 meters/minute

                    if sub_group['estimate_arrived_time'].max() - sub_group['platform_order_time'].min() >= pd.Timedelta(minutes=total_travel_time):
                        sub_group['group_id'] = group_id_counter  # Assign a group ID
                        grouped_orders.append(sub_group)
                        used_order_ids.update(sub_group['order_id'])  # Mark these orders as used
                        group_id_counter += 1
                    else:
                        for _, order in sub_group.iterrows():
                            if order['order_id'] not in used_order_ids:
                                ungrouped_orders.append(order.to_dict())
                                used_order_ids.add(order['order_id'])

    # Handle ungrouped orders immediately
    for _, order in group.iterrows():
        if order['order_id'] not in used_order_ids:
            order['group_id'] = None  # Mark as ungrouped
            ungrouped_orders.append(order.to_dict())  # Convert order to a dictionary
            used_order_ids.add(order['order_id'])  # Mark this order as used

    # Convert interval back to a Timestamp for correct addition
    interval_timestamp = pd.to_datetime(interval_timestamp, unit='s')

    # Courier becomes available after 60 minutes
    heapq.heappush(courier_queue, ((interval_timestamp + timedelta(minutes=60)).timestamp(), courier_id))

# Calculate metrics
# 1. Average Delivery Time
data['delivery_time'] = data['arrive_time'] - data['platform_order_time']
average_delivery_time = data['delivery_time'].mean()

# 2. Customer Satisfaction Rate
on_time_deliveries = data[data['arrive_time'] <= data['estimate_arrived_time']]
customer_satisfaction_rate = (len(on_time_deliveries) / len(data)) * 100

# 3. Average Distance Traveled
def calculate_delivery_distance(row):
    start = (row['sender_lat'], row['sender_lng'])
    end = (row['recipient_lat'], row['recipient_lng'])
    return geodesic(start, end).meters

# Re-run the distance calculation
data['distance_traveled'] = data.apply(calculate_delivery_distance, axis=1)
average_distance_traveled = data['distance_traveled'].mean()

# 4. Grouping Rate
# Flatten the list of grouped orders to get a list of all orders that were grouped
grouped_order_ids = [order_id for group in grouped_orders for order_id in group['order_id'].unique()]

# Calculate the number of unique grouped orders
unique_grouped_orders = len(set(grouped_order_ids))

# Calculate the total number of orders
total_orders = len(data)

# Calculate the grouping rate as the percentage of unique grouped orders out of the total number of orders
grouping_rate = (unique_grouped_orders / total_orders) * 100

# Print all metrics
print("Average Delivery Time:", average_delivery_time)
print("Customer Satisfaction Rate:", customer_satisfaction_rate, "%")
print("Average Distance Traveled:", average_distance_traveled)
print("Grouping Rate:", grouping_rate, "%")

# Visualization
plt.figure(figsize=(10, 7))

# Use plt.get_cmap to get a colormap for grouped orders
cmap = plt.get_cmap('tab20')

# Plotting ungrouped orders first with red color and no lines
ungrouped_handle = plt.plot([], [], 'ro', markersize=5, alpha=0.7, label='Ungrouped Order')
for order in ungrouped_orders:
    plt.plot(order['recipient_lng'], order['recipient_lat'], 'ro', markersize=5, alpha=0.7)

# Plotting each 2-minute interval group with a different color for grouped orders with lines
grouped_handles = []
for group in grouped_orders:
    if len(group) > 1:  # Ensure only groups with more than one order are plotted
        color = cmap(group_id_counter % 20)
        lngs = group['recipient_lng'].values
        lats = group['recipient_lat'].values
        plt.plot(lngs, lats, 'o-', color=color, markersize=5, alpha=0.7)
        group_id_counter += 1

# Manually create the legend to ensure distinct entries
plt.legend([ungrouped_handle[0]], ['Ungrouped Order'], loc='upper left')

if grouped_handles:
    plt.legend([ungrouped_handle[0], grouped_handles[0][0]], ['Ungrouped Order', 'Grouped Order (Clusters)'], loc='upper left')

plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('Grouped vs Ungrouped Orders with Clusters')
plt.grid(True)
plt.show()

# Save grouped orders to CSV for reference
grouped_orders_df = pd.concat(grouped_orders)
grouped_orders_df.to_csv('/content/grouped_orders_with_ids.csv', index=False)

# Save ungrouped orders to CSV for reference
ungrouped_orders_df = pd.DataFrame(ungrouped_orders)
ungrouped_orders_df.to_csv('/content/ungrouped_orders.csv', index=False)
